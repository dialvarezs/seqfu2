#!/usr/bin/env python
"""
Split FASTA/FASTQ files into multiple files according to:
 * Number of desired files,
 * Number of sequences per file, or
 * Number of bases per file.
"""

# Compatibility notes:
# subprocess.devnull is new in Python 3.3.
from __future__ import print_function
__VERSION__ = "0.2.0"
import sys, os, re
import subprocess


DEFAULT_COUNTER_LEN = 5
class SplitOpt:
    def __init__(self, args, version=None):
        self.bin  = getBin(args.bin)
        self.tags = [args.for_tag, args.rev_tag]
        self.seqfuver = version
        self.threads = int(args.threads) if args.threads is not None else 1
        self.verbose = True if args.verbose or args.debug else False
        self.debug   = args.debug
        self.char    = args.number_char if args.number_char is not None else '0'
        self.input   = args.input
        self.reverse = args.input_rev
        self.output_string = args.output
        self.prefix, self.num_len, self.suffix, self.format = self.parse_output_string()

        self.compress = True if args.compress else True if self.output_string.endswith('.gz') else False
    
    def __str__(self):
        return "fu-split{input: %s, output:%s%s%s, " % (self.input, self.prefix, "?" * self.num_len, self.suffix) + "threads: %d, verbose: %s, compress: %s}" % (self.threads, self.verbose, self.compress)

    def getPair(self):
        if self.reverse is None:
            return ""
        else:
            if self.input == self.reverse:
                return self.tags[1]
            else:
                return self.tags[0]

    def getOutput(self, number):
        """
        Return the formatted output file name for a given number.
        """
        suffix = self.getPair()
        suffix += self.suffix if self.suffix is not None else ''
        prefix = self.prefix if self.prefix is not None else ''
        
        return prefix + str(number).zfill(self.num_len) + suffix

    def parse_output_string(self):
        """
        Parse the output string.
        """
        format = None
        if self.output_string is None:
            return None, None, None, None
        dirname, filename = os.path.split(self.output_string)
        m = re.match(r'^(.*?)(%s{3,})(.*)$' % self.char, filename)
        if ".fasta" in self.output_string.lower() or ".fa" in self.output_string.lower():
            format = "--fasta"
        elif ".fastq" in self.output_string.lower() or ".fq" in self.output_string.lower():
            format = "--fastq"
        if m is None:
            return self.output_string, DEFAULT_COUNTER_LEN, '', None
        else:
            return os.path.join(dirname, m.group(1)), len(m.group(2)), m.group(3), format

def getBin(bin=None):
    if bin:
        return bin
    # check env variable SEQFU_BIN
    if "SEQFU_BIN" in os.environ:
        return os.environ["SEQFU_BIN"]
    else:
        return "seqfu"

def checkSeqfuVersion(minver="1.13.0", verbose=False):
    versionRequested = minver.split(".")
    versionOk = False
    versionDetected = ["-", "-", "-"]
    cmd = [getBin(), "--version"]
    if verbose:
        print("[getVersion] %s, requested %s" %  (" ".join(cmd), minver), 
            file=sys.stderr)
    try:
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        version = p.stdout.read().decode("utf-8").split("\n")[0].strip().split(".")

        if len(version) < 3:
            versionDetected[0] = version     

        if verbose:
            print("[getVersion.cmd] seqfu version: %s" % '.'.join(version), file=sys.stderr)

        versionDetected = version

        # Compare semver
        if version[0] < versionRequested[0]:
            if verbose:
                print("\tMajor version too low: %s < %s" % (version[0], minver.split(".")[0]), file=sys.stderr)
            return versionOk, versionDetected
        elif version[0] == versionRequested[0]:
            # 1.x.f == 1.y.z
            if version[1] < versionRequested[1]:
                if verbose:
                    print("\tMiddle version too low: %s < %s" % (version[0], versionRequested[0]), file=sys.stderr)
                return versionOk, versionDetected
            elif version[1] == versionRequested[1]:
                if version[2] < versionRequested[2]:
                    if verbose:
                        print("\tLast version too low: %s < %s" % (version[0], minver.split(".")[0]), file=sys.stderr)
                    return versionOk, versionDetected
                else:
                    versionOk = True
                    return versionOk, versionDetected
            else:
                versionOk = True
                return versionOk, versionDetected
        elif version[0] > versionRequested[0]:
            versionOk = True
            return versionOk, versionDetected
    except Exception as e:
        print("Error: `seqfu` not found:", e, file=sys.stderr)
        return versionOk, versionDetected

    return versionOk, [getBin(), "x", "x"]

def parse_bases(bases):
    """
    Receive a number or number with suffix (kb, gb, tb)
    """
    if bases.isdigit():
        return int(bases)
    else:
        if bases.lower().endswith("b"):
            bases = bases[:-1]
        elif bases.lower().endswith("bp"):
            bases = bases[:-2]
        suffix = bases[-1].lower()

        if suffix == "k":
            return int(bases[:-1]) * 1000
        elif suffix == "m":
            return int(bases[:-1]) * 1000 * 1000
        elif suffix == "g":
            return int(bases[:-1]) * 1000 * 1000 * 1000
        elif suffix == "t":
            return int(bases[:-1]) * 1000 * 1000 * 1000 * 1000
        else:
            print("Error: Invalid base number: %s" % bases, file=sys.stderr)
            return int(bases)
def removeNone(list):
    return [x for x in list if x is not None]

def parseLast(text):
    for line in text.split("\n"):
        if line.startswith("Last:"):

            return ":".join(line.strip().split(":")[1:])
    return None

def delFile(filename, verbose=False):
    if os.path.exists(filename):
        try:
            if verbose:
                print("[delete] rm %s" % filename, file=sys.stderr)
            os.remove(filename)
        except Exception as e:
            print("Error: Cannot remove file: %s" % filename, file=sys.stderr)
            print(e, file=sys.stderr)
            return False
    else:
        print("Error: File %s not found" % filename, file=sys.stderr)
        return False

def runcmds(cmd1, cmd2, output, opt):
    cmd1 = removeNone(cmd1)
    cmd2 = removeNone(cmd2)
    last = None
    try:
        if opt.debug:
            print("[cmd] Running: %s" % ' '.join(cmd1), file=sys.stderr)
        e1 = subprocess.Popen(cmd1, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except Exception as e:
        print("[runcmds-1] Error:", e, file=sys.stderr)
        return False, last

    if opt.compress:
        try:
            if opt.debug:
                print("[cmd] Running: %s and gzip" % ' '.join(cmd2), file=sys.stderr)
            e2   = subprocess.Popen(cmd2, stdin=e1.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            subprocess.Popen(["gzip", "-c"], stdin=e2.stdout, stderr=subprocess.PIPE, stdout=output).communicate()
            last = parseLast(e2.stderr.read().decode("utf-8"))
        except Exception as e:
            print("[runcmds-gz] Error:", e, file=sys.stderr)
            return False, last
    else:
        try:
            if opt.debug:
                print("[cmd] Running: %s" % ' '.join(cmd2), file=sys.stderr)
            e2 = subprocess.Popen(cmd2, stdin=e1.stdout, stderr=subprocess.PIPE, stdout=output).communicate()
            last = parseLast(e2[1].decode("utf-8"))
        except Exception as e:
            print("[runcmds-regular] Error:", e, file=sys.stderr)
            print("E2:", e2[1], file=sys.stderr)
            return False, last
    return True, last

def runSingleCommand(cmd1, output, opt):
    ## splitFileByBp
    cmd1 = removeNone(cmd1)
    
    if opt.compress:
        try:
            if opt.debug:
                print("[cmdsingle] Running: %s and gzip" % ' '.join(cmd1), file=sys.stderr)
            e1 = subprocess.Popen(cmd1, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            subprocess.Popen(["gzip", "-c"], stdin=e1.stdout, stderr=subprocess.PIPE, stdout=output).communicate()
            last = parseLast(e1.stderr.read().decode("utf-8"))
            if opt.debug:
                print("# ", last, file=sys.stderr)
            return last
        except Exception as e:
            print("[singlecmd-gzip] Error:", e, file=sys.stderr)
            return None
    else:
        try:
            if opt.debug:
                print("[cmdsingle] Running: %s" % ' '.join(cmd1), file=sys.stderr)
            e1 = subprocess.Popen(cmd1, stderr=subprocess.PIPE, stdout=output).communicate()
            last = parseLast(e1[1].decode("utf-8"))
            if opt.debug:
                print("# ", last, file=sys.stderr)
            return last
        except Exception as e:
            print("[singlecmd-nozip] Error:", e, "\n", e1, file=sys.stderr)
            return None


def last_seq(file):
    cmd = [getBin(), "tail", "-n", "1", file]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return p.stdout.read().decode("utf-8").split("\n")[0].split("\t")[0].split(" ")[0].strip()[1:]

def splitFileBySeqs(input, num_seqs, opt):
    """
    Split a file into multiple files by number of sequences.
    """
    finished = False
    fromArg = None
    fromSeq = None
    n = 0
    while not finished:

        n += 1
        output = open(opt.getOutput(n), "w")
        cat = [getBin(opt.bin), "cat", opt.format, fromArg, fromSeq, input]
        head = [getBin(opt.bin), "head", "--print-last", "-n", str(num_seqs)]
        run, last  = runcmds(cat, head, output, opt)
        
        if last is None:
            last = last_seq(output.name)
       
        if opt.verbose:
            print("Step: ", n, " to: ", output.name, " (last: "+last+")" if last else '(end)', file=sys.stderr)
        
        if last != "":
            fromArg = "--jump-to"
            fromSeq = last
        else:
            # Remove output.name
            output.close()
            delFile(output.name, opt.debug)
            finished = True
        
def splitFileByBp(input, bp, opt):
    """
    Split a file into multiple files by number of sequences.
    """
    finished = False
    fromArg = None
    fromSeq = None
    n = 0
    while not finished:
        n += 1

        output = open(opt.getOutput(n), "w")
        if opt.verbose:
            print("Step: ", n, " to: ", output.name, " (last: "+fromSeq+")" if fromSeq else '', file=sys.stderr)
  
        cat = [getBin(opt.bin), "cat","--print-last", opt.format, fromArg, fromSeq, "--max-bp", str(bp), input]
        last  = runSingleCommand(cat, output, opt)
        
        if last is None:
            last = last_seq(output.name)      
        if last != "":
            fromArg = "--jump-to"
            fromSeq = last
        else:
            # Remove output.name
            output.close()
            # if empty: remove file
            
            delFile(output.name, opt.debug)
            finished = True

def splitFileInN(input, n, opt):
    """
    Split a file into multiple files evenly distributed using
    multiple threads.
    """
    processes = set()
    for i in range(n):
        cmd = [getBin(opt.bin), "cat", "--skip", str(n), "--skip-first", str(i), opt.format, input]
        cmd = removeNone(cmd)
        
        output = open(opt.getOutput(i+1), "w")
        processes.add(subprocess.Popen(cmd, stdout=output, stderr=subprocess.PIPE))
        if opt.verbose:
            print("Chunk: ", i + 1, " to: ", output.name, file=sys.stderr)
        if len(processes) >= opt.threads:
            os.wait()
            processes.difference_update([
                p for p in processes if p.poll() is not None])
        
        # Wait for all processes to finish
        for p in processes:
            if opt.debug:
                print("Waiting for: ", p.pid, file=sys.stderr)
            p.wait()
            if p.returncode != 0:
                print("Error:", p.stderr.read().decode("utf-8"), file=sys.stderr)
                return False
            


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Split FASTA/FASTQ files into multiple files")
    parser.add_argument("-i", "--input", help="Input file", required=True)
    parser.add_argument("-I", "--input-rev", help="Second input file (reverse pair)", required=False)
    parser.add_argument("-o", "--output", help="Output file (add a stretch of 3+ zeroes to specify the progressive number), compression will be detected. Example: parz_0000.fq.gz", required=True)
    parser.add_argument("--for-tag", help="Tag to use for the forward reads output (default: %(default)s", default="_R1")
    parser.add_argument("--rev-tag", help="Tag to use for the forward reads output (default: %(default)s", default="_R2")

    method = parser.add_mutually_exclusive_group(required=True)
    method.add_argument("-n", "--num-files", help="Number of desired files", type=int)
    method.add_argument("-s", "--num-seqs", help="Number of sequences per file", type=int)
    method.add_argument("-b", "--num-bases", help="Number of bases per file", type=str)

    other = parser.add_argument_group("Other options")
    other.add_argument("--threads", help="Number of threads (-n only) [default: %(default)s", default=8, type=int)
    other.add_argument("--number-char", help="Character used to represent the progressive number in output string [default: %(default)s", default="0", type=str)
    other.add_argument("--compress", help="Force compression of the output files", action="store_true")
    other.add_argument("--bin", help="Seqfu binary, can be $SEQFU_BIN [deafault: %(default)s]", default=getBin())
    other.add_argument("--verbose", help="Verbose mode", action="store_true")
    other.add_argument("--debug", help="Debug mode", action="store_true")
    

    # version
    parser.add_argument("--version", action="version", version="%(prog)s " + __VERSION__)
    args = parser.parse_args()


    try:
        checked, version = checkSeqfuVersion("1.13.0", args.verbose)
    except Exception as e:
        print(checkSeqfuVersion("1.13.0", args.verbose))
        print("Error:", e, file=sys.stderr)
        sys.exit(1)
    if not checked:
        print("Error: seqfu version 1.13.0 or higher is required, %s found" % ".".join(version), file=sys.stderr)
        sys.exit(1)

    opt = SplitOpt(args, version)

    if opt.verbose:
        print(opt, file=sys.stderr)

    if args.num_files is not None:
        splitFileInN(args.input, args.num_files, opt)
        if args.input_rev is not None:
            opt.input = args.input_rev
            print(">>>", opt.input, opt.reverse)
            splitFileInN(args.input_rev, args.num_files, opt)
    elif args.num_seqs is not None:
        splitFileBySeqs(opt.input, args.num_seqs, opt)
        if args.input_rev is not None:
            opt.input = args.input_rev
            splitFileBySeqs(opt.input_rev, args.num_seqs, opt)
    elif args.num_bases is not None:
        bases = parse_bases(args.num_bases)
        splitFileByBp(opt.input, bases, opt)
        if args.input_rev is not None:
            opt.input = args.input_rev
            splitFileByBp(opt.input_rev, bases, opt)